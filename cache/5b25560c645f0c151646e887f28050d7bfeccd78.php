---
title: Installation
extends: _layouts.documentation
section: content
---

Livewire has both a PHP component AND a Javascript component. You need to make sure both are available in your project before you can use it.

## Install the package {#install-package}
<?php $__env->startComponent('_partials.code', ['lang' => 'bash']); ?>

composer require livewire/livewire

<?php echo $__env->renderComponent(); ?>

## Include the JavaScript {#include-js}
Add the following Blade directive somewhere in the `head` tag in your template.

<?php $__env->startComponent('_partials.code'); ?>

<head>
    ...
    @livewireAssets
</head>
<body>
    ...
</body>
</html>

<?php echo $__env->renderComponent(); ?>

Livewire will load its JavaScript assets from the relative root. For example, here's the `<script>` tag that will be generated by default:

<?php $__env->startComponent('_partials.code'); ?>
<script src="/livewire/livewire.js?id=123456789" defer></script>
<?php echo $__env->renderComponent(); ?>

If your app's root isn't the domain root, for example `http://yourapp.com/admin`, the Livewire assets won't load because they would need the following script tag url:

<?php $__env->startComponent('_partials.code'); ?>
<script src="http://yourapp.com/admin/livewire/livewire.js?id=123456789" defer></script>
<?php echo $__env->renderComponent(); ?>

To fix this, you can optionally pass in a `asset_url` option to the `@livewireAssets` directive like so:

<?php $__env->startComponent('_partials.code', ['lang' => 'php']); ?>

@livewireAssets(['asset_url' => 'http://yourapp.com/admin']);

<?php echo $__env->renderComponent(); ?>

## Publishing assets {#publish-assets}

If you prefer the JavaScript assets to be served by your web server not through Laravel, use the `vendor:publish` command:

<?php $__env->startComponent('_partials.code', ['lang' => 'bash']); ?>

php artisan vendor:publish --tag=livewire:assets

<?php echo $__env->renderComponent(); ?>

To keep the assets up-to-date and avoid issues in future updates, we **highly recommend** adding the command to the `post-autoload-dump` scripts in your `composer.json` file:

<?php $__env->startComponent('_partials.code', ['lang' => 'json']); ?>

{
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi",
            "@php artisan vendor:publish --force --tag=livewire:assets --ansi"
        ]
    }
}

<?php echo $__env->renderComponent(); ?>

## Publishing the config file {#publishing-config}

Livewire aims for "zero-configuration" out-of-the-box, but some users require more configuration options.

You can publish Livewire's config file with the following artisan command:

<?php $__env->startComponent('_partials.code', ['lang' => 'bash']); ?>

php artisan vendor:publish --tag=livewire:config

<?php echo $__env->renderComponent(); ?>

Here are the configurable options contained in this config file:

Config Name | Default Value | Description
--- | ---
"class_namespace" | "App\Http\Livewire" | The folder to install Livewire classes and look for them.
"view_path" | `resource_path('view')` | The folder to add Livewire component views to.
"asset_url" | null | The url to load the Livewire JavaScript assets from.
<?php /**PATH /Users/calebporzio/Documents/Code/sites/livewire-docs/cache/4452576f7252b688a011c64d1611e544ac563a0b.blade.md ENDPATH**/ ?>